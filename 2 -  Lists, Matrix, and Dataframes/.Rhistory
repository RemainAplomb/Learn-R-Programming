## NA Values
sales_Vector <- c( 10, 20, NA, 40, 50, 60, 70)
print(sales_vector)
## NA Values
sales_vector <- c( 10, 20, NA, 40, 50, 60, 70)
print(sales_vector)
days <- c( "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
names(saleS_Vector) <- days
days <- c( "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
names(sales_Vector) <- days
print(sales_Vector)
## Adding vectors with NA value
sales_vector + 5
print(sales_vector)
## NA Values
sales_vector <- c( 10, 20, NA, 40, 50, 60, 70)
print(sales_vector)
days <- c( "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
names(sales_Vector) <- days
print(sales_Vector)
## Adding vectors with NA value
## Note:
##    - When performing operations on the
##      vector, the names will most likely
##      disappear
sales_vector <- sales_vector + 5
print(sales_vector)
## Vector Subsets
take_top3 <- sales_vector[1:3]
print(take_top3)
length_sales_vector <- length(sales_vector)
print(length_sales_vector)
length_top3 <- length(take_top3)
print(take_top3)
length_top3 <- length(take_top3)
print(length_top3)
sales_vector_subset1 <- sales_vector[(length_sales_vector - 1): 1]
print(sales_vector_subset1)
## Take 6 elements starting from the last index
sales_vector_subset1 <- sales_vector[2: 1]
print(sales_vector_subset1)
## Take 3 elements starting from the second to the last index
sales_vector_subset2 <- sales_vector[3: 2]
print(sales_vector_subset2)
## NA Values
sales_vector <- c( 10, 20, NA, 40, 50, 60, 70)
print(sales_vector)
days <- c( "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
names(sales_Vector) <- days
print(sales_Vector)
## Adding vectors with NA value
## Note:
##    - When performing operations on the
##      vector, the names will most likely
##      disappear
sales_vector <- sales_vector + 5
print(sales_vector)
## Vector Subsets
take_top3 <- sales_vector[1:3]
print(take_top3)
length_sales_vector <- length(sales_vector)
print(length_sales_vector)
length_top3 <- length(take_top3)
print(length_top3)
## Take 6 elements starting from the last index
sales_vector_subset1 <- sales_vector[(length_sales_vector - 1): 1]
print(sales_vector_subset1)
## NA Values
sales_vector <- c( 10, 20, NA, 40, 50, 60, 70)
print(sales_vector)
days <- c( "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
names(sales_Vector) <- days
print(sales_Vector)
## Adding vectors with NA value
## Note:
##    - When performing operations on the
##      vector, the names will most likely
##      disappear
sales_vector <- sales_vector + 5
print(sales_vector)
## Vector Subsets
take_top3 <- sales_vector[1:3]
print(take_top3)
length_sales_vector <- length(sales_vector)
print(length_sales_vector)
length_top3 <- length(take_top3)
print(length_top3)
## Take 6 elements starting from the last index
sales_vector_subset1 <- sales_vector[(length_sales_vector - 1): 1]
print(sales_vector_subset1)
print(sales_Vector)
## Take 3 elements starting from the second to the last index
sales_vector_subset2 <- sales_vector[3: 2]
print(sales_vector_subset2)
## Take 6 elements starting from the last index
sales_vector_subset1 <- sales_vector[(length_sales_vector - 1): 0]
print(sales_vector_subset1)
## Take 6 elements starting from the last index
sales_vector_subset1 <- sales_vector[(length_sales_vector - 1): 1]
print(sales_vector_subset1)
print(sales_Vector)
## Take 3 elements starting from the second to the last index
sales_vector_subset2 <- sales_vector[3: 1]
print(sales_vector_subset2)
## Reverse the order of the sales vector
sales_vector_subset3 <- sales_vector[length_sales_vector:1]
print(sales_vector_subset3)
##
sales_vector_subset4 <- sales_vector[(length_sales_vector-2):l]
##
sales_vector_subset4 <- sales_vector[(length_sales_vector-2):length_sales_vector]
print(sales_vector_subset4)
## NA Values
sales_vector <- c(10, 20, NA, 40, 50, 60, 70)  # Creating a vector with numeric values and NA
print(sales_vector)
days <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")  # Creating a vector with day names
names(sales_Vector) <- days  # Assigning day names to the vector (Note: there is a typo in variable name)
print(sales_Vector)
## Adding vectors with NA value
## Note:
##    - When performing operations on the
##      vector, the names will most likely
##      disappear
sales_vector <- sales_vector + 5  # Adding 5 to each element of the vector
print(sales_vector)
## Vector Subsets
### Creating a subset vector with the first three elements
take_top3 <- sales_vector[1:3]
print(take_top3)
### Calculating the length of the vector
length_sales_vector <- length(sales_vector)
print(length_sales_vector)
### Calculating the length of the subset vector
length_top3 <- length(take_top3)
print(length_top3)
## Creating a subset vector in reverse order
sales_vector_subset1 <- sales_vector[(length_sales_vector - 1):1]
print(sales_vector_subset1)
print(sales_Vector)  # Printing the original vector with names
## Creating a subset vector in reverse order using a different indexing approach
sales_vector_subset2 <- sales_vector[3:1]
print(sales_vector_subset2)
## Creating a subset vector in reverse order using length
sales_vector_subset3 <- sales_vector[length_sales_vector:1]
print(sales_vector_subset3)
## Creating a subset vector with the last three elements
sales_vector_subset4 <- sales_vector[(length_sales_vector-2):length_sales_vector]
print(sales_vector_subset4)
## Creating matrix
sample <- 15:30
sample_matrix1 <- matrix(sample)
print(sample_matrix1)
## Matrix Creation
sample_matrix2 <- matrix(0, 3, 3)
print(sample_matrix2)
sample_matrix3 <- matrix( 1:9, 3, 3 )
print(sample_matrix3)
sample_matrix4 <- matrix( 1:9, nrow= 3, byrow=T)
print(sample_matrix4)
sample_matrix5 <- matrix( 1:9, 3, 3, byrow=T)
print(sample_matrix5)
## Using vectors to create matrix
sample_vector1 <- c(1, 10,100,10000,100000)
sample_vector2 <- c(50,100,200,400,800)
merge_sample_vectors <- c(sample_vector1, sample_vector2)
print(merge_sample_vectors)
sample_matrix6 <- matrix( merge_sample_vectors, byrow = TRUE, nrow = 2)
print(sample_matrix6)
## Selection and Indexing
sales_vector <- c(15,30,NA,25,50,35,70,40,80,11,33,27,23,19,NA,38)
sales_matrix <- matrix( sales_vector, nrow = 4, ncol = 4, byrow = T)
print(sales_matrix)
## Add dimension names
col_names <- c( "Shop1", "Shop2", "Shop3", "Shop4")
row_names <- c( "Chips", "Burgers", "Ice Cream", "Spaghetti")
dimnames(sales_vector)<- list(col_names, row_names)
## Selection and Indexing
sales_vector <- c(15,30,NA,25,50,35,70,40,80,11,33,27,23,19,NA,38)
sales_matrix <- matrix( sales_vector, nrow = 4, ncol = 4, byrow = T)
print(sales_matrix)
## Add dimension names
col_names <- c( "Shop1", "Shop2", "Shop3", "Shop4")
row_names <- c( "Chips", "Burgers", "Ice Cream", "Spaghetti")
dimnames(sales_matrix)<- list(col_names, row_names)
student<-matrix(c(20,30,NA,70,22,28,36,80,24,26,32,75,26,24,NA,50),nrow=4,ncol=4,byrow=T)
## Selection and Indexing
sales_vector <- c(15,30,NA,25,50,35,70,40,80,11,33,27,23,19,NA,38)
sales_matrix <- matrix( sales_vector, nrow = 4, ncol = 4, byrow = T)
print(sales_matrix)
## Add dimension names
col_names <- c( "Shop1", "Shop2", "Shop3", "Shop4")
row_names <- c( "Chips", "Burgers", "Ice Cream", "Spaghetti")
dimnames(sales_matrix)<- list(col_names, row_names)
print(sales_matrix)
## Data Frame merging
authors <- data.frame(
surname = I(c("Ten Years of Remnant Dreams",
"Chang Yu",
"Rizal",
"LKY",
"Balagtas")),
nationality = c("CN",
"CN",
"PH",
"SG",
"PH"),
deceased = c("yes", rep("no", 4)))
books <- data.frame(
name = I(c("Ten Years of Remnant Dreams",
"Chang Yu",
"Rizal",
"LKY",
"Balagtas",
"McNeil",
"R Core")),
title = c("Iron Age",
"Power and Wealth",
"Noli Me Tangere",
"One Man's View of the World",
"Florante at Laura",
"The Singapore Story",
"From Third World to First"),
other.author = c(NA,
NA,
NA,
NA,
NA,
NA,
"Authorrr"))
print(authors)
print(books)
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
## Data Frame merging
authors <- data.frame(
surname = I(c("Ten Years of Remnant Dreams",
"Chang Yu",
"Rizal",
"LKY",
"Balagtas")),
nationality = c("CN",
"CN",
"PH",
"SG",
"PH"),
deceased = c(rep("no", 2), rep("yes", 3)))
books <- data.frame(
name = I(c("Ten Years of Remnant Dreams",
"Chang Yu",
"Rizal",
"LKY",
"Balagtas",
"McNeil",
"R Core")),
title = c("Iron Age",
"Power and Wealth",
"Noli Me Tangere",
"One Man's View of the World",
"Florante at Laura",
"The Singapore Story",
"From Third World to First"),
other.author = c(NA,
NA,
NA,
NA,
NA,
NA,
"Authorrr"))
print(authors)
print(books)
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
## Manipulating dataframes
salesreport<-data.frame(Id=101:110,
Product=c("A","B"),
Unitprice=as.integer(runif(10,100,200)),
Qty=as.integer(runif(10,10,20))
)
## Manipulating dataframes
sales_report<-data.frame(Id=101:110,
Product=c("A","B"),
Unitprice=as.integer(runif(10,100,200)),
Qty=as.integer(runif(10,10,20))
)
print(sales_report)
## Transposing dataframe
transpose.salesreport<-t(salesreport)
View(transpose.salesreport)
head(transpose.salesreport)
## Manipulating dataframes
sales_report<-data.frame(Id=91:100,
Product=c("A","B", "C"),
Unitprice=as.integer(runif(10,100,200)),
Qty=as.integer(runif(10,10,20))
)
## Manipulating dataframes
sales_report<-data.frame(Id=91:100,
Product=c("A","B"),
Unitprice=as.integer(runif(10,100,200)),
Qty=as.integer(runif(10,10,20))
)
print(sales_report)
## Manipulating dataframes
sales_report<-data.frame(Id=91:102,
Product=c("A","B", "C"),
Unitprice=as.integer(runif(10,100,200)),
Qty=as.integer(runif(10,10,20))
)
print(sales_report)
## Manipulating dataframes
sales_report<-data.frame(Id=91:102,
Product=c("A","B", "C"),
Unitprice=as.integer(runif(10,100,200)),
Qty=as.integer(runif(10,10,20))
)
print(sales_report)
## Manipulating dataframes
sales_report<-data.frame(Id=91:102,
Product=c("A","B", "C"),
Unitprice=as.integer(runif(10,100,200,300)),
Qty=as.integer(runif(10,10,20,20))
)
print(sales_report)
## Manipulating dataframes
sales_report<-data.frame(Id=91:102,
Product=c("A","B", "C"),
Unitprice=as.integer(runif(10,100,200)),
Qty=as.integer(runif(10,10,20,20))
)
## Manipulating dataframes
sales_report<-data.frame(Id=91:102,
Product=rep(c("A", "B", "C"), length.out = 12),
Unitprice=as.integer(runif(10,100,200)),
Qty=as.integer(runif(10,10,20,20))
)
## Manipulating dataframes
sales_report<-data.frame(Id=91:102,
Product=rep(c("A", "B", "C"), length.out = 12),
Unitprice=as.integer(runif(10,100,200)),
Qty=as.integer(runif(10,10,20))
)
## Manipulating dataframes
sales_report<-data.frame(Id=91:102,
Product= rep(c("A", "B", "C"), length.out = 12),
Unitprice= as.integer(runif(12, 100, 200)),
Qty= as.integer(runif(12,10,20))
)
print(sales_report)
## Transposing dataframe
transponsed_sales_report <- t(sales_report)
View(transponsed_sales_report)
head(transponsed_sales_report)
## Sorting of dataframe
sales_report[order(sales_report$Unitprice),]
sales_report[order(sales_report$Unitprice,decreasing = T),]
## Descending order
sales_report[order(sales_report$Unitprice,decreasing = T),]
sales_report[order(sales_report$Product,-sales_report$Unitprice),]
## This demonstrates sorting the sales_report dataframe
## based on multiple columns. It first sorts the dataframe
## on the Product column in ascending order, and then within
## each level of the Product column, it sorts in descending
## order based on the Unitprice column. The -sales_report$Unitprice
## argument in the order() function negates the sorting order of
## the Unitprice column, resulting in a descending order.
sales_report[order(sales_report$Product,-sales_report$Unitprice),]
## Dataframe subset
sales_report_subset1 <- subset(sales_report,Product=="B")
print(sales_report_subset1)
# Extract the rows for which Product is A and Unitprice > 150
sales_report_subset2<- subset(sales_report,Product=="C" & Unitprice>150)
print(sales_report_subset2)
# Extract only the first and the fourth column Product is A and Unitprice > 150
ales_report_subset3 <- subset(sales_report,Product=="A" & Unitprice>150,c(1,3))
print(sales_report_subset3)
# Extract only the first and the fourth column Product is A and Unitprice > 150
sales_report_subset3 <- subset(sales_report,Product=="A" & Unitprice>150,c(1,3))
print(sales_report_subset3)
# Extract only the first and the fourth column Product is A and Unitprice > 150
sales_report_subset3 <- subset(sales_report,Product=="A" & Unitprice>110,c(1,3))
print(sales_report_subset3)
sales_report_subset4 <- subset(sales_report,Product=="B")
sales_report_subset5 <- subset(sales_report,Product=="C")
print(sales_report_subset4)
print(sales_report_subset5)
cbind(sales_report_subset4,sales_report_subset5)
rbind(sales_report_subset4,sales_report_subset5)
aggregate(sales_report$Qty,list(sales_report$Prod),sum,na.rm=T)
